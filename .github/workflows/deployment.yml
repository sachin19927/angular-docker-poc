
name: Deploy to Aws Backend Services
on:
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select The environment
        default: dev
        required: true
      release-build:
        type: boolean
        description: Wheather is this a release build?
        default: false
concurrency:
  group: ${{github.workflow}}-${{github.ref}}-${{github.event.environment || 'dev'}}
  cancel-in-progress: true
jobs:
  deploy:
    runs-on: self-hosted-aws-angular
    env:
      RUN_ID: ${{github.run_id}}
      APP_NAME: angular-docker-poc
      NAME_SPACE: ui-services
      REGISTRY: 773120352783.dkr.ecr.ap-south-1.amazonaws.com
      BP_NODE_VERSION: '>15'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
         fetch-depth: 0

    - name: Export branch name as Env variable
      uses: nelonoel/branch-name@v1.0.1

    - name: Set Image Tag
      id: sets-image-tag
      env:
         RELEASE_BUILD: ${{github.event.inputs.release-build}}
      run: |
         if [[$RELEASE_BUILD == true]]; then
            echo "IMAGE_TAG=${{env.REGISTRY}}/${{env.NAME_SPACE}}/${{env.APP_NAME}}:${{env.BRANCH_NAME}}-${{env.RUN_ID}}"  >> $GITHUB_ENV
         else
            echo "IMAGE_TAG=${{env.REGISTRY}}/${{env.NAME_SPACE}}/${{env.APP_NAME}}:devbuild-${{env.BRANCH_NAME}}-${{env.RUN_ID}}"  >> $GITHUB_ENV
         fi

    - name: Build Docker image from nginx with toml file
      run:  pack build ${{env.APP_NAME}}:${{env.RUN_ID}}-nginx-toml --builder paketobuildpacks/builder:full --descriptor nginx.toml

    - name: Build Docker image from httpd with toml file
      run:  pack build ${{env.APP_NAME}}:${{env.RUN_ID}}-httpd-toml --builder paketobuildpacks/builder:full --descriptor httpd.toml

    - name: Build Docker image from httpd cmd
      run:  pack build ${{env.APP_NAME}}:${{env.RUN_ID}}-nginx --builder paketobuildpacks/builder:full --buildpack paketo-buildpacks/web-servers --env BP_NODE_VERSION=18.16.0 --env BP_NODE_RUN_SCRIPTS=build:nginx --env BP_NGINX_VERSION="1.19.8" --env BP_WEB_SERVER=nginx --env BP_WEB_SERVER_ENABLE_PUSH_STATE=true --env BP_WEB_SERVER_FORCE_HTTPS=false	--env BP_WEB_SERVER_ROOT=dist/angular-docker-poc

    - name: Build Docker image from nginx cmd
      run:  pack build ${{env.APP_NAME}}:${{env.RUN_ID}}-httpd --builder paketobuildpacks/builder:full --buildpack paketo-buildpacks/web-servers --env BP_NODE_VERSION=18.16.0 --env BP_NODE_RUN_SCRIPTS=build:httpd --env BP_NGINX_VERSION="2.4.46" --env BP_WEB_SERVER=httpd --env BP_WEB_SERVER_ENABLE_PUSH_STATE=true --env BP_WEB_SERVER_FORCE_HTTPS=false	--env BP_WEB_SERVER_ROOT=dist/angular-docker-poc

    - name: Login to AWS ECR
      run : sudo aws ecr get-login-password --region ap-south-1 | sudo docker login --username AWS --password-stdin 773120352783.dkr.ecr.ap-south-1.amazonaws.com

    - name: Tag Docker image of nginx toml file
      run:  docker tag ${{env.APP_NAME}}:${{env.RUN_ID}}-nginx-toml ${{env.IMAGE_TAG}}-nginx-toml

    - name: Tag Docker image of httpd toml file
      run:  docker tag ${{env.APP_NAME}}:${{env.RUN_ID}}-https-toml ${{env.IMAGE_TAG}}-httpd-toml

    - name: Tag Docker image of nginx
      run:  docker tag ${{env.APP_NAME}}:${{env.RUN_ID}}-nginx ${{env.IMAGE_TAG}}-nginx

    - name: Tag Docker image of httpd
      run:  docker tag ${{env.APP_NAME}}:${{env.RUN_ID}}-httpd ${{env.IMAGE_TAG}}-httpd

    - name: Push Docker image nginx-toml
      run:  docker push ${{env.IMAGE_TAG}}-nginx-toml

    - name: Push Docker image httpd-toml
      run:  docker push ${{env.IMAGE_TAG}}-httpd-toml

    - name: Push Docker image nginx
      run:  docker push ${{env.IMAGE_TAG}}-nginx

    - name: Push Docker image httpd
      run:  docker push ${{env.IMAGE_TAG}}-httpd

    - name: Run Docker image nginx-toml
      run:  docker run -d -p 4201:8080 ${{env.IMAGE_TAG}}-nginx-toml

    - name: Run Docker image httpd-toml
      run:  docker run -d -p 4202:8080 ${{env.IMAGE_TAG}}-httpd-toml

    - name: Run Docker image nginx
      run:  docker run -d -p 4203:8080 ${{env.IMAGE_TAG}}-nginx

    - name: Run Docker image httpd
      run:  docker run -d -p 4204:8080 ${{env.IMAGE_TAG}}-httpd
